generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model invoice {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  license_id      String?  @db.Uuid
  end_customer_id String?  @db.Uuid
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)
  user            user?    @relation(fields: [end_customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  license         license? @relation(fields: [license_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model license {
  id                                         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  end_customer_id                            String?   @db.Uuid
  sales_representative_id                    String?   @db.Uuid
  created_at                                 DateTime  @default(now()) @db.Timestamp(6)
  updated_at                                 DateTime  @default(now()) @db.Timestamp(6)
  invoice                                    invoice[]
  user_license_end_customer_idTouser         user?     @relation("license_end_customer_idTouser", fields: [end_customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_license_sales_representative_idTouser user?     @relation("license_sales_representative_idTouser", fields: [sales_representative_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                            String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                         String         @unique @db.VarChar(255)
  firstName                                     String?        @db.VarChar(255)
  lastName                                      String?        @db.VarChar(255)
  roq_user_id                                   String         @db.VarChar(255)
  tenant_id                                     String         @db.VarChar(255)
  created_at                                    DateTime       @default(now()) @db.Timestamp(6)
  updated_at                                    DateTime       @default(now()) @db.Timestamp(6)
  invoice                                       invoice[]
  license_license_end_customer_idTouser         license[]      @relation("license_end_customer_idTouser")
  license_license_sales_representative_idTouser license[]      @relation("license_sales_representative_idTouser")
  organization                                  organization[]
}
